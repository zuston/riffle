// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

use hyper::StatusCode;
use log::error;

use super::error::{ProfError, ProfResult};

/// Dump the profile to the `path`. path usually is a temp file generated by `tempfile` crate.
pub async fn dump_prof(path: &str) -> ProfResult<Vec<u8>> {
    let mut prof_ctl = jemalloc_pprof::PROF_CTL.as_ref().unwrap().lock().await;
    let pprof = prof_ctl.dump_pprof().map_err(|err| {
        let msg = format!("Errors on jemalloc profile. err: {:?}", &err);
        error!("{}", &msg);
        ProfError::JemallocError(msg)
    })?;
    Ok(pprof)
}

pub async fn dump_heap_flamegraph() -> ProfResult<Vec<u8>> {
    let mut prof_ctl = jemalloc_pprof::PROF_CTL.as_ref().unwrap().lock().await;
    let svg = prof_ctl.dump_flamegraph().map_err(|err| {
        let msg = format!("Errors on jemalloc prof flamegraph. err: {:?}", &err);
        error!("{}", &msg);
        ProfError::JemallocError(msg)
    })?;
    Ok(svg)
}
